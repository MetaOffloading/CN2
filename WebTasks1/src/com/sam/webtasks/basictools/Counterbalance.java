package com.sam.webtasks.basictools;

import java.util.ArrayList;

import com.google.gwt.user.client.Random;
import com.google.gwt.user.client.Window;

public class Counterbalance {
	private static ArrayList<String> factorNames = new ArrayList<String>();    //name of each factor
	private static ArrayList<Integer> factorLevels = new ArrayList<Integer>(); //level of each factor
	private static ArrayList<Integer> maxLevels = new ArrayList<Integer>();    //maximum level of each factor
	
	//add a new factor that should be counterbalanced, specifying its name and possible number of levels
	//this method will pick a random level
		public static void addFactor(String name, int nLevels) {
			factorNames.add(name);
			maxLevels.add(nLevels);
			
			factorLevels.add(Random.nextInt(nLevels));
		}
		
	//add a new factor that should be counterbalanced, specifying its name and possible number of levels,
	//and specifying what level it should be set to
	public static void addFactor(String name, int nLevels, int specifiedLevel) {
		factorNames.add(name);
		maxLevels.add(nLevels);
		
		factorLevels.add(specifiedLevel);
	}
	
	//find out the factor level for a named factor
	public static int getFactorLevel(String name) {
		int level=-1;
		
		for (int i=0; i < factorNames.size(); i++) {
			if (name.contentEquals(factorNames.get(i))){
				level=factorLevels.get(i);
			}
		}
		
		if(level==-1) {
			Window.alert("Factor " + name + " not found.");
		}
		
		return(level);
	}
	
	//set factor level
	public static void setFactorLevel(String name, int level) {
		for (int i=0; i < factorNames.size(); i++) {
			if (name.contentEquals(factorNames.get(i))) {
				factorLevels.set(i,  level);
			}
		}
	}
	
	//return an integer identifying which cell of the design we are in, i.e.
	//a single integer which uniquely specifies all of the factors
	public static int getCounterbalancingCell() {
		int cell=0;
		int multiplier=1; //what shall we multiply by?
		
		for (int i = 0; i < factorNames.size(); i++) { //loop over each factor
			cell += multiplier*factorLevels.get(i);
			multiplier *= maxLevels.get(i);		
		}
		
		return(cell);
	}
	
	//set the counterbalancing levels based on an integer generated by getCounterbalancingCell
	public static void setCounterbalancingFactors(int cell) {
		int multiplier=1;

		//first work out the maximum applicable multiplier
		for (int i = 0; i < factorNames.size()-1; i++) {
			multiplier *= maxLevels.get(i);
		}
		
		//now go one by one through the factors and set them based on the value of cell
		for (int i = factorNames.size()-1; i >= 0; i--) {
			factorLevels.set(i, cell / multiplier);
			
			cell -= multiplier*(cell/multiplier);
			
			if (i>0) {
				multiplier /= maxLevels.get(i-1);
			}
		}
	}
}
